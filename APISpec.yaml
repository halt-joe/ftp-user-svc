openapi: 3.0.3
info:
  title: FTP Users
  version: 1.0.0.0
  description: APIs to Manage FTP User Accounts
servers:
  - url: 'https://api.server.test'
    description: Test API Server
  - url: 'https://api.server.prod'
    description: Production API Server
paths:
  /login:
    post:
      summary: Verify FTP User
      operationId: post-login
      description: Verify that the username/password combination is valid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                ex-success:
                  value:
                    id: 132
                    status: 1
                    username: test-user
                    password: test-password
                    description: test-description
                    permissions:
                      "/":
                        - list
                        - download
                    virtual_folders:
                      - name: '1234'
                        filesystem:
                          provider: 3
                          azblobconfig:
                            container: test-container
                            account_name: test-account
                            key_prefix: 1234/
                            account_key:
                              status: Plain
                              payload: lT563yhnaanK1t7x7pZw22==
                              additional_data: folder_1234
                        virtual_path: "/1234"
                      - name: '5678'
                        filesystem:
                          provider: 3
                          azblobconfig:
                            container: test-container
                            account_name: test-account
                            key_prefix: 5678/
                            account_key:
                              status: Plain
                              payload: lT563yhnaanK1t7x7pZw22==
                              additional_data: folder_5678
                        virtual_path: "/5678"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-unauthorized:
                  value:
                    status: 401
                    location: source-file.go
                    message: Unauthorized (Failed Authentication)
                    error:
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-error:
                  value:
                    status: 500
                    location: source-file.go
                    message: Internal Server Error
                    error: Additional Error Messages
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
  /ftpusers:
    get:
      summary: Retrieve FTP Users
      operationId: get-ftpusers
      description: Returns an object with a key containing an array of all FTP User entries defined by the optional page, page_size and q(search) query parameters. The total item and total pages are also returned.
      parameters:
        - schema:
            type: integer
          in: query
          name: page
          description: (Optional) The index of the page within the ftp_users collection to return
        - schema:
            type: integer
          in: query
          name: page_size
          description: (Optional) The desired size of the result set to return
        - schema:
            type: string
          in: query
          name: q
          description: (Optional) A text string used to search the username and description fields producing a filtered result set
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FTPUsers'
              examples:
                ex-success:
                  value:
                    ftpusers:
                      - id: 1
                        username: user1
                        description: description1
                      - id: 2
                        username: user2
                        description: description2
                    total_items: 243
                    total_pages: 31
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-unauthorized:
                  value:
                    status: 401
                    location: source-file.go
                    message: Unauthorized (Failed Authentication)
                    error:
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-error:
                  value:
                    status: 500
                    location: source-file.go
                    message: Internal Server Error
                    error: Additional Error Messages
      security:
        - ApiKeyAuth: []
    post:
      summary: Create a New FTP User
      operationId: post-ftpusers
      description: Adds a new FTP User entry
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FTPUserNoPassword'
              examples:
                ex-created:
                  value:
                    id: 13
                    username: user13
                    description: description13
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-bad-request:
                  value:
                    status: 400
                    location: source-file.go
                    message: Bad Request
                    error: Username, Description and Passowrd are all required
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-unauthorized:
                  value:
                    status: 401
                    location: source-file.go
                    message: Unauthorized (Failed Authentication)
                    error:
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-bad-request:
                  value:
                    status: 409
                    location: source-file.go
                    message: Conflict
                    error: An FTP Account for [username] already exists
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-error:
                  value:
                    status: 500
                    location: source-file.go
                    message: Internal Server Error
                    error: Additional Error Messages
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FTPUser'
  '/ftpusers/{id}':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: The id of the FTP User entry
    get:
      summary: Retrieve FTP User
      operationId: get-ftpusers-id
      description: Retrieve the FTP User entry related to {id}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FTPUserNoPassword'
              examples:
                ex-success:
                  value:
                    id: 12
                    username: user12
                    description: description 12
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-bad-request:
                  value:
                    status: 400
                    location: source-file.go
                    message: Bad Request
                    error: Invalid FTP User ID
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-unauthorized:
                  value:
                    status: 401
                    location: source-file.go
                    message: Unauthorized (Failed Authentication)
                    error:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-not-found:
                  value:
                    status: 404
                    location: source-file.go
                    message: No matching user found
                    error:
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-error:
                  value:
                    status: 500
                    location: source-file.go
                    message: Internal Server Error
                    error: Additional Error Messages
      security:
        - ApiKeyAuth: []
    put:
      summary: Update FTP User
      operationId: put-ftpusers-id
      description: 'Updates the FTP User entry related to {id}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FTPUserNoPassword'
              examples:
                ex-success:
                  value:
                    id: 14
                    username: user14
                    description: description 14
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-bad-request:
                  value:
                    status: 400
                    location: source-file.go
                    message: Username and Description are both required
                    error:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-unauthorized:
                  value:
                    status: 401
                    location: source-file.go
                    message: Unauthorized (Failed Authentication)
                    error:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-not-found:
                  value:
                    status: 404
                    location: source-file.go
                    message: No matching FTP Account found
                    error:
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-error:
                  value:
                    status: 500
                    location: source-file.go
                    message: Internal Server Error
                    error: Additional Error Messages
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FTPUserUpdate'
    delete:
      summary: Delete FTP User
      operationId: delete-ftpusers-id
      description: 'Delete the FTP User entry related to {id} '
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-bad-request-invalid:
                  value:
                    status: 400
                    location: source-file.go
                    message: Invalid FTP User ID
                    error:
                ex-bad-request-conversion:
                  value:
                    status: 400
                    location: source-file.go
                    message: Cannot convert %s to an integer
                    error: Additional Error Messages
                
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-unauthorized:
                  value:
                    status: 401
                    location: source-file.go
                    message: Unauthorized (Failed Authentication)
                    error:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-not-found:
                  value:
                    status: 404
                    location: source-file.go
                    message: No matching FTP Account found
                    error:
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-error:
                  value:
                    status: 500
                    location: source-file.go
                    message: Internal Server Error
                    error: Additional Error Messages
      security:
        - ApiKeyAuth: []
    patch:
      summary: Change Password for FTP User
      operationId: patch-ftpusers-id
      description: Change the password for the FTP User related to {id}
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-bad-request-invalid:
                  value:
                    status: 400
                    location: source-file.go
                    message: Invalid FTP User ID
                    error:
                ex-bad-request-conversion:
                  value:
                    status: 400
                    location: source-file.go
                    message: Cannot convert %s to an integer
                    error: Additional Error Messages
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-unauthorized:
                  value:
                    status: 401
                    location: source-file.go
                    message: Unauthorized (Failed Authentication)
                    error:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-not-found:
                  value:
                    status: 404
                    location: source-file.go
                    message: No matching FTP Account found
                    error:
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-error:
                  value:
                    status: 500
                    location: source-file.go
                    message: Internal Server Error
                    error: Additional Error Messages
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FTPUserPassword'
  '/mappings/{system}/{id}':
    parameters:
      - name: system
        in: path
        required: true
        schema:
          type: string
        description: The system that the mapping needs to be associated
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: The id from the system
    get:
      summary: Retrieve Mapping
      operationId: get-mappings-system-id
      description: Retrieve the mapping for {system}/{id}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mapping'
              examples:
                ex-success:
                  value:
                    system: BillSys1
                    id: 999
                    ftp_account:
                      id: 15
                      username: user15
                      description: description 15
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-unauthorized:
                  value:
                    status: 401
                    location: source-file.go
                    message: Unauthorized (Failed Authentication)
                    error:
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-not-found:
                  value:
                    status: 404
                    location: source-file.go
                    message: No matching mapping found
                    error:
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-error:
                  value:
                    status: 500
                    location: source-file.go
                    message: Internal Server Error
                    error: Additional Error Messages
      security:
        - ApiKeyAuth: []
    delete:
      summary: Delete Mapping
      operationId: delete-mappings-system-id
      description: Delete the mapping for {system}/{id}
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-unauthorized:
                  value:
                    status: 401
                    location: source-file.go
                    message: Unauthorized (Failed Authentication)
                    error:
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-error:
                  value:
                    status: 500
                    location: source-file.go
                    message: Internal Server Error
                    error: Additional Error Messages
  '/mappings/{system}':
    parameters:
      - name: system
        in: path
        required: true
        schema:
          type: string
        description: The system that mappings are associated
    post:
      summary: Create or Update Mapping
      operationId: post-mappings-system
      description: Create a mapping for the system with the provided id and ftp_id or update if it exists
      responses:
        '200':
          description: Updated
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mapping'
              examples:
                ex-created:
                  value:
                    system: BillSys1
                    id: 997
                    ftp_account:
                      id: 16
                      username: user16
                      description: description 16
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-bad-request:
                  value:
                    status: 400
                    location: source-file.go
                    message: System, SystemID and FTP_ID are all required
                    error:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-unauthorized:
                  value:
                    status: 401
                    location: source-file.go
                    message: Unauthorized (Failed Authentication)
                    error:
        '404':
          description: Not Found (The requested ftp_id does not exist)
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-error:
                  value:
                    status: 500
                    location: source-file.go
                    message: Internal Server Error
                    error: Additional Error Messages
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MappingForSystem'
    get:
      summary: Retrieve all SystemID and Username pairs
      operationId: get-id-user-pairs-system
      description: Retrieve all SystemID and Username pairs for the provided System
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemIDUsernamePairs'
              example:
                system_id1: username1
                system_id2: username2
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-bad-request:
                  value:
                    status: 400
                    location: source-file.go
                    message: System is required
                    error:
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-unauthorized:
                  value:
                    status: 401
                    location: source-file.go
                    message: Unauthorized (Failed Authentication)
                    error:
        '404':
          description: Not Found (The requested system does not exist)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-unauthorized:
                  value:
                    status: 404
                    location: source-file.go
                    message: System [System Parameter] Not Found
                    error:
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ex-error:
                  value:
                    status: 500
                    location: source-file.go
                    message: Internal Server Error
                    error: Additional Error Messages
      security:
        - ApiKeyAuth: []
components:
  schemas:
    Error:
      title: Error
      type: object
      properties:
        status:
          type: integer
          description: The HTTP Status returned with the header in the response
        location:
          type: string
          description: A reference to the location in the code where the error occurred
        message:
          type: string
          description: A custom error message generated by the application
        error:
          type: string
          description: An error message generated by the runtime environment
      required:
        - status
        - location
    Credentials:
      title: Credentials
      type: object
      description: A set of credentials to verify
      properties:
        username:
          type: string
          description: The username of the FTP User entry
        password:
          type: string
          description: The password of the FTP User entry
      required:
        - username
        - password
    FTPUser:
      title: FTPUser
      type: object
      description: An FTP User entry
      properties:
        username:
          type: string
          description: The username for the FTP User
        description:
          type: string
          description: The description for the FTP User
        password:
          type: string
          description: The password for the FTP User
      required:
        - username
        - description
        - password
    FTPUserNoPassword:
      title: FTPUserNoPassword
      type: object
      description: An FTP User entry without the password
      properties:
        id:
          type: integer
          description: The FTP User entry id
        username:
          type: string
          description: The username for the FTP User
        description:
          type: string
          description: The description for the FTP User
      required:
        - id
        - username
        - description
    FTPUsers:
      title: FTPUsers
      type: object
      properties:
        ftpusers:
          type: array
          items:
            $ref: '#/components/schemas/FTPUserNoPassword'
        total_items:
          type: integer
        total_pages:
          type: integer
      description: A collection of FTPUser records without the password.  The count of ftpuser items is provided as well as the total pages of items.
    FTPUserUpdate:
      title: FTPUserUpdate
      type: object
      description: An FTP User update entry
      properties:
        username:
          type: string
          description: The username for the FTP User
        description:
          type: string
          description: The description for the FTP User
      required:
        - username
        - description
    FTPUserPassword:
      title: Password
      type: object
      description: A password used in an update
      properties:
        password:
          type: string
          description: The password of the FTP User entry
      required:
        - password
    Mapping:
      title: Mapping
      type: object
      description: A mapping entry where the ftp account does not contain the passsword
      properties:
        system:
          type: string
          description: The system that the mapping needs to be associated with
        id:
          type: string
          description: The system id that the ftp user entry needs to be associated
        ftp_account:
          $ref: '#/components/schemas/FTPUserNoPassword'
      required:
        - system
        - id
        - ftp_account
    MappingForSystem:
      title: MappingForSystem
      type: object
      description: A mapping entry without the system specified
      properties:
        id:
          type: string
          description: The system id that the ftp user entry needs to be associated
        ftp_id:
          type: integer
          description: The id of the FTP User entry
      required:
        - id
        - ftp_id
    SystemIDUsernamePairs:
      title: SystemIDUsernamePairs
      type: object
      description: A hashtable of system IDs and corresponding FTP username
      additionalProperties:
        title: SystemID
        description: The System ID to FTP username mapping
        type: string
    Permission:
      type: string
      enum:
        - '*'
        - list
        - download
        - upload
        - overwrite
        - delete
        - delete_files
        - delete_dirs
        - rename
        - rename_files
        - rename_dirs
        - create_dirs
        - create_symlinks
        - chmod
        - chown
        - chtimes
      description: |
        Permissions:
          * `*` - all permissions are granted
          * `list` - list items is allowed
          * `download` - download files is allowed
          * `upload` - upload files is allowed
          * `overwrite` - overwrite an existing file, while uploading, is allowed. upload permission is required to allow file overwrite
          * `delete` - delete files or directories is allowed
          * `delete_files` - delete files is allowed
          * `delete_dirs` - delete directories is allowed
          * `rename` - rename files or directories is allowed
          * `rename_files` - rename files is allowed
          * `rename_dirs` - rename directories is allowed
          * `create_dirs` - create directories is allowed
          * `create_symlinks` - create links is allowed
          * `chmod` changing file or directory permissions is allowed
          * `chown` changing file or directory owner and group is allowed
          * `chtimes` changing file or directory access and modification time is allowed
    DirPermissions:
      type: object
      additionalProperties:
        type: array
        items:
          $ref: '#/components/schemas/Permission'
        minItems: 1
      minProperties: 1
      description: 'hash map with directory as key and an array of permissions as value. Directories must be absolute paths, permissions for root directory ("/") are required'
    FsProviders:
      type: integer
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
      description: |
        Filesystem providers:
          * `0` - Local filesystem
          * `1` - S3 Compatible Object Storage
          * `2` - Google Cloud Storage
          * `3` - Azure Blob Storage
          * `4` - Local filesystem encrypted
          * `5` - SFTP
    LoginMethods:
      type: string
      enum:
        - publickey
        - password
        - password-over-SSH
        - keyboard-interactive
        - publickey+password
        - publickey+keyboard-interactive
        - TLSCertificate
        - TLSCertificate+password
      description: |
        Available login methods. To enable multi-step authentication you have to allow only multi-step login methods
          * `publickey`
          * `password`, password for all the supported protocols
          * `password-over-SSH`, password over SSH protocol (SSH/SFTP/SCP)
          * `keyboard-interactive`
          * `publickey+password` - multi-step auth: public key and password
          * `publickey+keyboard-interactive` - multi-step auth: public key and keyboard interactive
          * `TLSCertificate`
          * `TLSCertificate+password` - multi-step auth: TLS client certificate and password
    SupportedProtocols:
      type: string
      enum:
        - SSH
        - FTP
        - DAV
        - HTTP
      description: |
        Protocols:
          * `SSH` - includes both SFTP and SSH commands
          * `FTP` - plain FTP and FTPES/FTPS
          * `DAV` - WebDAV over HTTP/HTTPS
          * `HTTP` - WebClient/REST API
    MFAProtocols:
      type: string
      enum:
        - SSH
        - FTP
        - HTTP
      description: |
        Protocols:
          * `SSH` - includes both SFTP and SSH commands
          * `FTP` - plain FTP and FTPES/FTPS
          * `HTTP` - WebClient/REST API
    WebClientOptions:
      type: string
      enum:
        - publickey-change-disabled
        - write-disabled
        - mfa-disabled
        - password-change-disabled
        - api-key-auth-change-disabled
        - info-change-disabled
        - shares-disabled
        - password-reset-disabled
        - shares-without-password-disabled
      description: |
        Options:
          * `publickey-change-disabled` - changing SSH public keys is not allowed
          * `write-disabled` - upload, rename, delete are not allowed even if the user has permissions for these actions
          * `mfa-disabled` - enabling multi-factor authentication is not allowed. This option cannot be set if the user has MFA already enabled
          * `password-change-disabled` - changing password is not allowed
          * `api-key-auth-change-disabled` - enabling/disabling API key authentication is not allowed
          * `info-change-disabled` - changing info such as email and description is not allowed
          * `shares-disabled` - sharing files and directories with external users is not allowed
          * `password-reset-disabled` - resetting the password is not allowed
          * `shares-without-password-disabled` - creating shares without password protection is not allowed
    UserType:
      type: string
      enum:
        - ''
        - LDAPUser
        - OSUser
      description: This is an hint for authentication plugins. It is ignored when using SFTPGo internal authentication
    RecoveryCode:
      type: object
      properties:
        secret:
          $ref: '#/components/schemas/Secret'
        used:
          type: boolean
      description: 'Recovery codes to use if the user loses access to their second factor auth device. Each code can only be used once, you should use these codes to login and disable or reset 2FA for your account'
    BaseTOTPConfig:
      type: object
      properties:
        enabled:
          type: boolean
        config_name:
          type: string
          description: 'This name must be defined within the "totp" section of the SFTPGo configuration file. You will be unable to save a user/admin referencing a missing config_name'
        secret:
          $ref: '#/components/schemas/Secret'
    UserTOTPConfig:
      allOf:
        - $ref: '#/components/schemas/BaseTOTPConfig'
        - type: object
          properties:
            protocols:
              type: array
              items:
                $ref: '#/components/schemas/MFAProtocols'
              description: 'TOTP will be required for the specified protocols. SSH protocol (SFTP/SCP/SSH commands) will ask for the TOTP passcode if the client uses keyboard interactive authentication. FTP has no standard way to support two factor authentication, if you enable the FTP support, you have to add the TOTP passcode after the password. For example if your password is "password" and your one time passcode is "123456" you have to use "password123456" as password. WebDAV is not supported since each single request must be authenticated and a passcode cannot be reused.'
    PatternsFilter:
      type: object
      properties:
        path:
          type: string
          description: 'exposed virtual path, if no other specific filter is defined, the filter applies for sub directories too. For example if filters are defined for the paths "/" and "/sub" then the filters for "/" are applied for any file outside the "/sub" directory'
        allowed_patterns:
          type: array
          items:
            type: string
          description: 'list of, case insensitive, allowed shell like patterns.'
          example:
            - '*.jpg'
            - a*b?.png
        denied_patterns:
          type: array
          items:
            type: string
          description: 'list of, case insensitive, denied shell like patterns. Denied patterns are evaluated before the allowed ones'
          example:
            - '*.zip'
        deny_policy:
          type: integer
          enum:
            - 0
            - 1
          description: |
            Deny policies
              * `0` - default policy. Denied files/directories matching the filters are visible in directory listing but cannot be uploaded/downloaded/overwritten/renamed
              * `1` - deny policy hide. This policy applies the same restrictions as the default one and denied files/directories matching the filters will also be hidden in directory listing. This mode may cause performance issues for large directories
    HooksFilter:
      type: object
      properties:
        external_auth_disabled:
          type: boolean
          example: false
          description: If true, the external auth hook, if defined, will not be executed
        pre_login_disabled:
          type: boolean
          example: false
          description: If true, the pre-login hook, if defined, will not be executed
        check_password_disabled:
          type: boolean
          example: false
          description: If true, the check password hook, if defined, will not be executed
      description: User specific hook overrides
    BandwidthLimit:
      type: object
      properties:
        sources:
          type: array
          items:
            type: string
          description: 'Source networks in CIDR notation as defined in RFC 4632 and RFC 4291 for example `192.0.2.0/24` or `2001:db8::/32`. The limit applies if the defined networks contain the client IP'
        upload_bandwidth:
          type: integer
          format: int32
          description: 'Maximum upload bandwidth as KB/s, 0 means unlimited'
        download_bandwidth:
          type: integer
          format: int32
          description: 'Maximum download bandwidth as KB/s, 0 means unlimited'
    DataTransferLimit:
      type: object
      properties:
        sources:
          type: array
          items:
            type: string
          description: 'Source networks in CIDR notation as defined in RFC 4632 and RFC 4291 for example `192.0.2.0/24` or `2001:db8::/32`. The limit applies if the defined networks contain the client IP'
        upload_data_transfer:
          type: integer
          description: 'Maximum data transfer allowed for uploads as MB. 0 means no limit'
        download_data_transfer:
          type: integer
          description: 'Maximum data transfer allowed for downloads as MB. 0 means no limit'
        total_data_transfer:
          type: integer
          description: 'Maximum total data transfer as MB. 0 means unlimited. You can set a total data transfer instead of the individual values for uploads and downloads'
    UserFilters:
      type: object
      properties:
        allowed_ip:
          type: array
          items:
            type: string
          description: 'only clients connecting from these IP/Mask are allowed. IP/Mask must be in CIDR notation as defined in RFC 4632 and RFC 4291, for example "192.0.2.0/24" or "2001:db8::/32"'
          example:
            - 192.0.2.0/24
            - '2001:db8::/32'
        denied_ip:
          type: array
          items:
            type: string
          description: clients connecting from these IP/Mask are not allowed. Denied rules are evaluated before allowed ones
          example:
            - 172.16.0.0/16
        denied_login_methods:
          type: array
          items:
            $ref: '#/components/schemas/LoginMethods'
          description: if null or empty any available login method is allowed
        denied_protocols:
          type: array
          items:
            $ref: '#/components/schemas/SupportedProtocols'
          description: if null or empty any available protocol is allowed
        file_patterns:
          type: array
          items:
            $ref: '#/components/schemas/PatternsFilter'
          description: 'filters based on shell like file patterns. These restrictions do not apply to files listing for performance reasons, so a denied file cannot be downloaded/overwritten/renamed but it will still be in the list of files. Please note that these restrictions can be easily bypassed'
        max_upload_file_size:
          type: integer
          format: int64
          description: 'maximum allowed size, as bytes, for a single file upload. The upload will be aborted if/when the size of the file being sent exceeds this limit. 0 means unlimited. This restriction does not apply for SSH system commands such as `git` and `rsync`'
        tls_username:
          type: string
          enum:
            - None
            - CommonName
          description: 'defines the TLS certificate field to use as username. For FTP clients it must match the name provided using the "USER" command. For WebDAV, if no username is provided, the CN will be used as username. For WebDAV clients it must match the implicit or provided username. Ignored if mutual TLS is disabled'
        hooks:
          $ref: '#/components/schemas/HooksFilter'
        disable_fs_checks:
          type: boolean
          example: false
          description: Disable checks for existence and automatic creation of home directory and virtual folders. SFTPGo requires that the user's home directory, virtual folder root, and intermediate paths to virtual folders exist to work properly. If you already know that the required directories exist, disabling these checks will speed up login. You could, for example, disable these checks after the first login
        web_client:
          type: array
          items:
            $ref: '#/components/schemas/WebClientOptions'
          description: WebClient/user REST API related configuration options
        allow_api_key_auth:
          type: boolean
          description: 'API key authentication allows to impersonate this user with an API key'
        user_type:
          $ref: '#/components/schemas/UserType'
        totp_config:
          $ref: '#/components/schemas/UserTOTPConfig'
        recovery_codes:
          type: array
          items:
            $ref: '#/components/schemas/RecoveryCode'
        bandwidth_limits:
          type: array
          items:
            $ref: '#/components/schemas/BandwidthLimit'
        data_transfer_limits:
          type: array
          items:
            $ref: '#/components/schemas/DataTransferLimit'
        external_auth_cache_time:
          type: integer
          description: 'Defines the cache time, in seconds, for users authenticated using an external auth hook. 0 means no cache'
        start_directory:
          type: string
          description: 'Specifies an alternate starting directory. If not set, the default is "/". This option is supported for SFTP/SCP, FTP and HTTP (WebClient/REST API) protocols. Relative paths will use this directory as base.'
        2fa_protocols:
          type: array
          items:
            $ref: '#/components/schemas/MFAProtocols'
          description: 'Defines protocols that require two factor authentication'
      description: Additional user options
    Secret:
      type: object
      properties:
        status:
          type: string
          enum:
            - Plain
            - AES-256-GCM
            - Secretbox
            - GCP
            - AWS
            - VaultTransit
            - AzureKeyVault
            - Redacted
          description: 'Set to "Plain" to add or update an existing secret, set to "Redacted" to preserve the existing value'
        payload:
          type: string
        key:
          type: string
        additional_data:
          type: string
        mode:
          type: integer
          description: 1 means encrypted using a master key
      description: The secret is encrypted before saving, so to set a new secret you must provide a payload and set the status to "Plain". The encryption key and additional data will be generated automatically. If you set the status to "Redacted" the existig secret will be preserved
    S3Config:
      type: object
      properties:
        bucket:
          type: string
          minLength: 1
        region:
          type: string
          minLength: 1
        access_key:
          type: string
        access_secret:
          $ref: '#/components/schemas/Secret'
        role_arn:
          type: string
          description: 'Optional IAM Role ARN to assume'
        endpoint:
          type: string
          description: optional endpoint
        storage_class:
          type: string
        acl:
          type: string
          description: 'The canned ACL to apply to uploaded objects. Leave empty to use the default ACL. For more information and available ACLs, see here: https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl'
        upload_part_size:
          type: integer
          description: 'the buffer size (in MB) to use for multipart uploads. The minimum allowed part size is 5MB, and if this value is set to zero, the default value (5MB) for the AWS SDK will be used. The minimum allowed value is 5.'
        upload_concurrency:
          type: integer
          description: 'the number of parts to upload in parallel. If this value is set to zero, the default value (5) will be used'
        upload_part_max_time:
          type: integer
          description: 'the maximum time allowed, in seconds, to upload a single chunk (the chunk size is defined via "upload_part_size"). 0 means no timeout'
        download_part_size:
          type: integer
          description: 'the buffer size (in MB) to use for multipart downloads. The minimum allowed part size is 5MB, and if this value is set to zero, the default value (5MB) for the AWS SDK will be used. The minimum allowed value is 5. Ignored for partial downloads'
        download_concurrency:
          type: integer
          description: 'the number of parts to download in parallel. If this value is set to zero, the default value (5) will be used. Ignored for partial downloads'
        download_part_max_time:
          type: integer
          description: 'the maximum time allowed, in seconds, to download a single chunk (the chunk size is defined via "download_part_size"). 0 means no timeout. Ignored for partial downloads.'
        force_path_style:
          type: boolean
          description: 'Set this to "true" to force the request to use path-style addressing, i.e., "http://s3.amazonaws.com/BUCKET/KEY". By default, the S3 client will use virtual hosted bucket addressing when possible ("http://BUCKET.s3.amazonaws.com/KEY")'
        key_prefix:
          type: string
          description: 'key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with "/" and must end with "/". If empty the whole bucket contents will be available'
          example: folder/subfolder/
      description: S3 Compatible Object Storage configuration details
    GCSConfig:
      type: object
      properties:
        bucket:
          type: string
          minLength: 1
        credentials:
          $ref: '#/components/schemas/Secret'
        automatic_credentials:
          type: integer
          enum:
            - 0
            - 1
          description: |
            Automatic credentials:
              * `0` - disabled, explicit credentials, using a JSON credentials file, must be provided. This is the default value if the field is null
              * `1` - enabled, we try to use the Application Default Credentials (ADC) strategy to find your application's credentials
        storage_class:
          type: string
        acl:
          type: string
          description: 'The ACL to apply to uploaded objects. Leave empty to use the default ACL. For more information and available ACLs, refer to the JSON API here: https://cloud.google.com/storage/docs/access-control/lists#predefined-acl'
        key_prefix:
          type: string
          description: 'key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with "/" and must end with "/". If empty the whole bucket contents will be available'
          example: folder/subfolder/
      description: 'Google Cloud Storage configuration details. The "credentials" field must be populated only when adding/updating a user. It will be always omitted, since there are sensitive data, when you search/get users'
    AzureBlobFsConfig:
      type: object
      properties:
        container:
          type: string
        account_name:
          type: string
          description: 'Storage Account Name, leave blank to use SAS URL'
        account_key:
          $ref: '#/components/schemas/Secret'
        sas_url:
          $ref: '#/components/schemas/Secret'
        endpoint:
          type: string
          description: 'optional endpoint. Default is "blob.core.windows.net". If you use the emulator the endpoint must include the protocol, for example "http://127.0.0.1:10000"'
        upload_part_size:
          type: integer
          description: 'the buffer size (in MB) to use for multipart uploads. If this value is set to zero, the default value (5MB) will be used.'
        upload_concurrency:
          type: integer
          description: 'the number of parts to upload in parallel. If this value is set to zero, the default value (5) will be used'
        download_part_size:
          type: integer
          description: 'the buffer size (in MB) to use for multipart downloads. If this value is set to zero, the default value (5MB) will be used.'
        download_concurrency:
          type: integer
          description: 'the number of parts to download in parallel. If this value is set to zero, the default value (5) will be used'
        access_tier:
          type: string
          enum:
            - ''
            - Archive
            - Hot
            - Cool
        key_prefix:
          type: string
          description: 'key_prefix is similar to a chroot directory for a local filesystem. If specified the user will only see contents that starts with this prefix and so you can restrict access to a specific virtual folder. The prefix, if not empty, must not start with "/" and must end with "/". If empty the whole container contents will be available'
          example: folder/subfolder/
        use_emulator:
          type: boolean
      description: Azure Blob Storage configuration details
    CryptFsConfig:
      type: object
      properties:
        passphrase:
          $ref: '#/components/schemas/Secret'
      description: Crypt filesystem configuration details
    SFTPFsConfig:
      type: object
      properties:
        endpoint:
          type: string
          description: 'remote SFTP endpoint as host:port'
        username:
          type: string
          description: you can specify a password or private key or both. In the latter case the private key will be tried first.
        password:
          $ref: '#/components/schemas/Secret'
        private_key:
          $ref: '#/components/schemas/Secret'
        fingerprints:
          type: array
          items:
            type: string
          description: 'SHA256 fingerprints to use for host key verification. If you don''t provide any fingerprint the remote host key will not be verified, this is a security risk'
        prefix:
          type: string
          description: Specifying a prefix you can restrict all operations to a given path within the remote SFTP server.
        disable_concurrent_reads:
          type: boolean
          description: Concurrent reads are safe to use and disabling them will degrade performance. Some servers automatically delete files once they are downloaded. Using concurrent reads is problematic with such servers.
        buffer_size:
          type: integer
          minimum: 0
          maximum: 16
          example: 2
          description: The size of the buffer (in MB) to use for transfers. By enabling buffering, the reads and writes, from/to the remote SFTP server, are split in multiple concurrent requests and this allows data to be transferred at a faster rate, over high latency networks, by overlapping round-trip times. With buffering enabled, resuming uploads is not supported and a file cannot be opened for both reading and writing at the same time. 0 means disabled.
    FilesystemConfig:
      type: object
      properties:
        provider:
          $ref: '#/components/schemas/FsProviders'
        s3config:
          $ref: '#/components/schemas/S3Config'
        gcsconfig:
          $ref: '#/components/schemas/GCSConfig'
        azblobconfig:
          $ref: '#/components/schemas/AzureBlobFsConfig'
        cryptconfig:
          $ref: '#/components/schemas/CryptFsConfig'
        sftpconfig:
          $ref: '#/components/schemas/SFTPFsConfig'
      description: Storage filesystem details
    BaseVirtualFolder:
      type: object
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
        name:
          type: string
          description: unique name for this virtual folder
        mapped_path:
          type: string
          description: absolute filesystem path to use as virtual folder
        description:
          type: string
          description: optional description
        used_quota_size:
          type: integer
          format: int64
        used_quota_files:
          type: integer
          format: int32
        last_quota_update:
          type: integer
          format: int64
          description: Last quota update as unix timestamp in milliseconds
        users:
          type: array
          items:
            type: string
          description: list of usernames associated with this virtual folder
        filesystem:
          $ref: '#/components/schemas/FilesystemConfig'
      description: 'Defines the filesystem for the virtual folder and the used quota limits. The same folder can be shared among multiple users and each user can have different quota limits or a different virtual path.'
    VirtualFolder:
      allOf:
        - $ref: '#/components/schemas/BaseVirtualFolder'
        - type: object
          properties:
            virtual_path:
              type: string
            quota_size:
              type: integer
              format: int64
              description: 'Quota as size in bytes. 0 menas unlimited, -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed'
            quota_files:
              type: integer
              format: int32
              description: 'Quota as number of files. 0 menas unlimited, , -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed'
          required:
            - virtual_path
      description: 'A virtual folder is a mapping between a SFTPGo virtual path and a filesystem path outside the user home directory. The specified paths must be absolute and the virtual path cannot be "/", it must be a sub directory. The parent directory for the specified virtual path must exist. SFTPGo will try to automatically create any missing parent directory for the configured virtual folders at user login.'
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
        status:
          type: integer
          enum:
            - 0
            - 1
          description: |
            status:
              * `0` user is disabled, login is not allowed
              * `1` user is enabled
        username:
          type: string
          description: username is unique
        email:
          type: string
          format: email
        description:
          type: string
          description: 'optional description, for example the user full name'
        expiration_date:
          type: integer
          format: int64
          description: expiration date as unix timestamp in milliseconds. An expired account cannot login. 0 means no expiration
        password:
          type: string
          format: password
          description: password or public key/SSH user certificate are mandatory. If the password has no known hashing algo prefix it will be stored, by default, using bcrypt, argon2id is supported too. You can send a password hashed as bcrypt ($2a$ prefix), argon2id, pbkdf2 or unix crypt and it will be stored as is. For security reasons this field is omitted when you search/get users
        public_keys:
          type: array
          items:
            type: string
            example: ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEUWwDwEWhTbF0MqAsp/oXK1HR2cElhM8oo1uVmL3ZeDKDiTm4ljMr92wfTgIGDqIoxmVqgYIkAOAhuykAVWBzc= user@host
          description: Public keys in OpenSSH format. A password or at least one public key/SSH user certificate are mandatory.
        home_dir:
          type: string
          description: path to the user home directory. The user cannot upload or download files outside this directory. SFTPGo tries to automatically create this folder if missing. Must be an absolute path
        virtual_folders:
          type: array
          items:
            $ref: '#/components/schemas/VirtualFolder'
          description: mapping between virtual SFTPGo paths and filesystem paths outside the user home directory. Supported for local filesystem only. If one or more of the specified folders are not inside the dataprovider they will be automatically created. You have to create the folder on the filesystem yourself
        uid:
          type: integer
          format: int32
          minimum: 0
          maximum: 2147483647
          description: 'if you run SFTPGo as root user, the created files and directories will be assigned to this uid. 0 means no change, the owner will be the user that runs SFTPGo. Ignored on windows'
        gid:
          type: integer
          format: int32
          minimum: 0
          maximum: 2147483647
          description: 'if you run SFTPGo as root user, the created files and directories will be assigned to this gid. 0 means no change, the group will be the one of the user that runs SFTPGo. Ignored on windows'
        max_sessions:
          type: integer
          format: int32
          description: Limit the sessions that a user can open. 0 means unlimited
        quota_size:
          type: integer
          format: int64
          description: Quota as size in bytes. 0 menas unlimited. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed
        quota_files:
          type: integer
          format: int32
          description: Quota as number of files. 0 menas unlimited. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed
        permissions:
          type: object
          items:
            $ref: '#/components/schemas/DirPermissions'
          minItems: 1
          example:
            /:
              - '*'
            /somedir:
              - list
              - download
        used_quota_size:
          type: integer
          format: int64
        used_quota_files:
          type: integer
          format: int32
        last_quota_update:
          type: integer
          format: int64
          description: Last quota update as unix timestamp in milliseconds
        upload_bandwidth:
          type: integer
          description: 'Maximum upload bandwidth as KB/s, 0 means unlimited'
        download_bandwidth:
          type: integer
          description: 'Maximum download bandwidth as KB/s, 0 means unlimited'
        upload_data_transfer:
          type: integer
          description: 'Maximum data transfer allowed for uploads as MB. 0 means no limit'
        download_data_transfer:
          type: integer
          description: 'Maximum data transfer allowed for downloads as MB. 0 means no limit'
        total_data_transfer:
          type: integer
          description: 'Maximum total data transfer as MB. 0 means unlimited. You can set a total data transfer instead of the individual values for uploads and downloads'
        used_upload_data_transfer:
          type: integer
          description: 'Uploaded size, as bytes, since the last reset'
        used_download_data_transfer:
          type: integer
          description: 'Downloaded size, as bytes, since the last reset'
        created_at:
          type: integer
          format: int64
          description: 'creation time as unix timestamp in milliseconds. It will be 0 for users created before v2.2.0'
        updated_at:
          type: integer
          format: int64
          description: last update time as unix timestamp in milliseconds
        last_login:
          type: integer
          format: int64
          description: Last user login as unix timestamp in milliseconds. It is saved at most once every 10 minutes
        filters:
          $ref: '#/components/schemas/UserFilters'
        filesystem:
          $ref: '#/components/schemas/FilesystemConfig'
        additional_info:
          type: string
          description: Free form text field for external systems
        oidc_custom_fields:
          type: object
          additionalProperties: true
          description: 'This field is passed to the pre-login hook if custom OIDC token fields have been configured. Field values can be of any type (this is a free form object) and depend on the type of the configured OIDC token fields'
  securitySchemes:
    ApiKeyAuth:
      name: X-API-KEY
      type: apiKey
      in: header
